head	1.6;
access;
symbols;
locks
	rolf:1.6; strict;
comment	@# @;


1.6
date	2014.01.27.08.39.32;	author rolf;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.06.21.16.32;	author rolf;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.31.21.30.40;	author rolf;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.08.22.58.14;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.21.01.57.03;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.12.21.45.32;	author rolf;	state Exp;
branches;
next	;


desc
@Function to solve the differential equation for the expected
value of a stock, ***given*** a pricing policy.  Starting
off from the version (called ``vsgen'' originally) developed
for the single arrival setting.
@


1.6
log
@Revised to be compatible with the ode() function rather than with
the roll-your-own Runge-Kutte procedure.
@
text
@vsolve <- function(S,lambda,gprob=NULL,tmax=NULL,x,nout=300,
                       alpha=NULL,salval=0,method="lsoda") {
#
# Function vsolve to solve numerically the system of d.e.'s for the
# value v_q(t) of a stock of q items at time t given a ***general***
# (not necessarily optimal; either discrete or continuous) pricing
# policy ``x'', specified as an object of class ``flap''.  Uses the
# method of Runge-Kutta.  (Note that time is ***residual*** time,
# decreasing toward the ``departure time'' of 0.)  But we solve
# ``forward in time'', starting from 0.
#

# Check on the given pricing policy.
    if(!inherits(x,"flap")) 
        stop("Argument x must be an object of class \"flap\".\n")
    qmax <- attr(x,"qmax")
    type <- if(inherits(x,"di.flap")) "dip" else "sip"

# If S is a piecewise linear price sensitivity function, obtain
# tmax, if NULL, as the corresponding attribute of that function
# otherwise make sure that it is smaller than that attribute.
    funtype <- attr(S,"funtype")
    if(!is.null(funtype) && funtype=="pwl") {
        if(is.null(tmax)) {
            tmax <- attr(S,"tmax")
        } else if(tmax > attr(S,"tmax")) {
                stop(paste("Argument \"tmax\" is greater than the \"tmax\" attribute\n",
                           "of the pwl price sensitivity function specified as\n",
                           "argument \"S\".\n"))
        }
    }

# Check that the functions in x were built on an interval at least
# as large as [0,tmax].  (Since they are step functions, their
# values are not really meaningful for arguments outside of the
# tlim attribute of x.)
    if(is.null(tmax)) {
        tmax <- attr(x,"tlim")[2]
    } else if(tmax > attr(x,"tlim")[2])
        stop("Argument \"x\" has attribute tlim[2] < tmax.\n")

# Make sure the group size probabilities are OK.
    if(is.null(gprob)) gprob <- 1
    gpr <- if(is.function(gprob)) gprob(1:qmax) else gprob
    if(!is.numeric(gpr)) stop("Group size probabilities are not numeric.\n")
    if(any(gpr<0) | sum(gpr) > 1)
        stop("Group size probabilities are not probabilities!\n")

# Find the value of jmax as determined by gprob.  If there is
# doubly indexed pricing, check that this value of jmax is less than 
# or equal to the jmax attribute of x.
    jmax <- max(which(gpr > sqrt(.Machine$double.eps)))
    jmax <- min(jmax,qmax)
    if(type=="dip" & jmax > attr(x,"jmax"))
        stop(paste("Pricing is group-size dependent and the maximum\n",
                   "customer group size is larger than the\n",
                   "\"jmax\" attribute of \"x\".\n"))

# Clip the group size probability vector to be of length jmax.
    gpr  <- gpr[1:jmax]

# Check up on alpha.
    if(is.null(alpha)) {
        if(jmax > 1) {
            stop(paste("Argument \"alpha\" must be specified if there is\n",
                       "non-zero probability of a group of size greater than 1.\n"))
        }
        alpha <- 1
    }

    N  <- length(x)
    nc <- if(type=="dip") jmax*(qmax - (jmax-1)/2) else qmax
    if(N != nc)
        stop("Length of \"x\" incommensurate with \"qmax\" and \"jmax\".\n")

# If S is a list make sure that it is of the right length.  Then
# check that all entries are either expressions (smooth functions
# for continuous prices) or functions (for discrete prices).  If S
# consists of only one function or expression, raise it to the power
# "n" making "n" a function argument.  In the expressions case
# differentiate the expression(s).
    if(is.list(S)) {
        if(length(S) != jmax)
            stop(paste("Length of \"S\" as a list must equal ",
                               "\"jmax\" = ",jmax,".\n",sep=""))
        if(all(sapply(S,is.expression))) {
            dS <- list()
            for(i in 1:jmax) {
                xxx  <- deriv3(S[[i]],c("x","t"),function.arg=c("x","t"))
                environment(xxx) <- new.env()
                pars <- attr(S[[i]],"parvec")
                for(nm in names(pars)) {
                    assign(nm,pars[nm],envir=environment(xxx))
                }
                dS[[i]] <- xxx
            }
        } else if(!all(sapply(S,is.function))) {
            stop("At least one entry of \"S\" is neither an expression nor a function.\n")
        }
    } else if(is.expression(S)) {
# Note that here S is an expression but even so the (counter-intuitive)
# syntax ``S[[1]]'' (a) makes ``sense'' and (b) is needed.
        pars <- attr(S,"parvec")
        S <- substitute(a^b,list(a=S[[1]],b=quote(n)))
        dS <- deriv3(S,c("x","t"),function.arg=c("x","t","n"))
        environment(dS) <- new.env()
        for(nm in names(pars)) {
            assign(nm,pars[nm],envir=environment(dS))
        }
    } else if(is.function(S)) {
        dS <- with(list(S=S),function(x,t,n) {S(x,t)^n})
    } else {
        stop(paste("Argument \"S\" must be either an expression or a list of such,\n",
                   "or a function or a list of such.\n"))
    }
    if(is.numeric(lambda)) {
        if(length(lambda) != 1 || lambda <=0)
            stop("When \"lambda\" is numeric it must be a positive scalar.\n")
        lambda <- with(list(lambda=lambda),function(t){rep(lambda,length(t))})
    }

    environment(scrF)    <- new.env()
    environment(cev)     <- new.env()
#
    assign("dS",dS,envir=environment(cev))
    assign("gpr",gpr,envir=environment(cev))
    assign("alpha",alpha,envir=environment(cev))
#
    assign("x",x,envir=environment(scrF))
    assign("lambda",lambda,envir=environment(scrF))
    assign("type",type,envir=environment(scrF))

# Do some setting up/initializing:
    tvec  <- seq(0,tmax,length=nout)
    v     <- (1:qmax)*salval

# Solve the differential equation.
odeRslt <- ode(v,tvec,scrF,parms=NULL,method=method)

# The functions in the object x are ``non-parametric'' functions;
# they could have been defined over a larger interval than [0,tmax]
# which is currently being investigated.  If so we need to reset
# the tlim and ylim values based on the current value of tmax.
#
    if(tmax < attr(x,"tlim")[2]) {
        ttt <- seq(0,tmax,length=nout)
        foo <- function(f,tt) {
                return(range(f(tt)))
        }
        tstor <- lapply(x,foo,tt=ttt)
        attr(x,'tlim') <- c(0,tmax)
        attr(x,'ylim') <- range(unlist(tstor))
    }
    comment(x) <- c(comment(x),"Prices not necessarily optimal.")
    putAway(odeRslt,type,jmax,qmax,soltype="vsolve",x=x,prices=NULL)
}
@


1.5
log
@Now checks on the value of "jmax" as determined from "gprob"
to make sure it's <= the "jmax" attribute of "x" when "x"
inherits from "di.flap".
@
text
@d1 2
a2 2
vsolve <- function(S,lambda,gprob=NULL,tmax=NULL,x,nstep,
                       alpha=NULL,salval=0,nverb=0) {
d133 2
a134 4
# Do the Runge-Kutta thing.
    tvec  <- seq(0,tmax,length=nstep+1)
    tt    <- tvec[1]
    delta <- tmax/nstep
d136 4
a139 18
    vdot <- scrF(v,tt)
    tstor   <- list()
    tstor[[1]] <- list(v=v,vdot=vdot)

    for(i in 1:nstep) {
        m1 <- delta*scrF(v,tt)
        m2 <- delta*scrF(v+m1/2,tt+delta/2)
        m3 <- delta*scrF(v+m2/2,tt+delta/2)
        m4 <- delta*scrF(v+m3,tt+delta)
        v  <- v + (m1+2*m2+2*m3+m4)/6
        vdot <- scrF(v,tt)
        tstor[[i+1]] <- list(v=v,vdot=vdot)
        tt <- tvec[i+1]
        if(nverb > 0 & i%%nverb == 0) cat(i,"")
        if(nverb > 0 & i%%(10*nverb) == 0) cat("\n")
    }
    if(nverb >= 0 & nstep%%10 != 0) cat("\n")
#
d146 1
a146 1
        ttt <- seq(0,tmax,length=nstep)
d154 2
a155 3
    comment(x) <- "Prices not necessarily optimal."
    tstor <- list(x=x,tstor=tstor)
    putAway(tstor,type,jmax,qmax,tmax)
@


1.4
log
@Changed the updating of "tt" to read from a "tvec" vector
rather than incrementing by "delta".  Now using putAway()
to create the final returned value rather than doing the
manipulations internally in vsolve().  Passes "x" (which
not created by vsolve()) over to putAway() "as is".
@
text
@d1 2
a2 2
vsolve <- function(type,tmax,nstep,x,lambda,S,alpha,
                        gprob,salval=0,nverb=0) {
d7 3
a9 3
# policy ``x'', specified as an object of class ``funlist''.
# Uses the method of Runge-Kutta.  (Note that time is ***residual***
# time, decreasing toward the ``departure time'' of 0.)  But we solve
d14 18
a31 3
if(!inherits(x,"funlist")) 
	stop("Argument x must be an object of class \"funlist\".\n")
qmax <- attr(x,"qmax")
d36 5
a40 3
# xlim attribute of x.)
if(tmax > attr(x,"xlim")[2])
	stop("Argument \"x\" has attribute xlim[2] < tmax.\n")
d43 58
a100 31
gpr <- if(is.function(gprob)) gprob(1:qmax) else gprob
if(!is.numeric(gpr)) stop("Group size probabilities are not numeric.\n")
if(any(gpr<0) | sum(gpr) > 1)
	stop("Group size probabilities are not probabilities!\n")
jmax <- max(which(gpr > sqrt(.Machine$double.eps)))
jmax <- min(jmax,qmax)
gpr  <- gpr[1:jmax]

N  <- length(x)
nc <- if(type=="dip") jmax*(qmax - (jmax-1)/2) else qmax
if(N != nc)
	stop("Length of \"x\" incommensurate with \"qmax\" and \"jmax\".\n")

# Differentiate each price sensitivity function.  If there
# is only one such, raise it to the power "n" and differentiate
# the result, making "n" a function argument.
if(is.list(S)) {
	if(length(S) != jmax)
		stop(paste("Length of \"S\" as a list must equal ",
                           "\"jmax\" = ",jmax,".\n",sep=""))
	dS <- list()
	for(i in 1:jmax) {
		xxx  <- deriv3(S[[i]],c("x","t"),function.arg=c("x","t"))
		environment(xxx) <- new.env()
		pars <- attr(S[[i]],"parlist")
		for(nm in names(pars)) {
			assign(nm,pars[nm],envir=environment(xxx))
		}
		dS[[i]] <- xxx
	}
} else if(is.expression(S)) {
d103 29
a131 21
	pars <- attr(S,"parlist")
	S <- substitute(a^b,list(a=S[[1]],b=quote(n)))
	dS <- deriv3(S,c("x","t"),function.arg=c("x","t","n"))
	environment(dS) <- new.env()
	for(nm in names(pars)) {
		assign(nm,pars[nm],envir=environment(dS))
	}
} else {
	stop("Argument \"S\" must be either an expression or a list of such.\n")
}

environment(scrF)    <- new.env()
environment(cev)     <- new.env()
#
assign("dS",dS,envir=environment(cev))
assign("gpr",gpr,envir=environment(cev))
assign("alpha",alpha,envir=environment(cev))
#
assign("x",x,envir=environment(scrF))
assign("lambda",lambda,envir=environment(scrF))
assign("type",type,envir=environment(scrF))
d134 21
a154 21
tvec  <- seq(0,tmax,length=nstep+1)
tt    <- tvec[1]
delta <- tmax/nstep
v     <- (1:qmax)*salval
vdot <- scrF(v,tt)
tstor   <- list()
tstor[[1]] <- list(v=v,vdot=vdot)

for(i in 1:nstep) {
	m1 <- delta*scrF(v,tt)
	m2 <- delta*scrF(v+m1/2,tt+delta/2)
	m3 <- delta*scrF(v+m2/2,tt+delta/2)
	m4 <- delta*scrF(v+m3,tt+delta)
	v  <- v + (m1+2*m2+2*m3+m4)/6
	vdot <- scrF(v,tt)
	tstor[[i+1]] <- list(v=v,vdot=vdot)
	tt <- tvec[i+1]
	if(nverb > 0 & i%%nverb == 0) cat(i,"")
	if(nverb > 0 & i%%(10*nverb) == 0) cat("\n")
}
if(nverb > 0) cat("\n")
d159 1
a159 1
# the xlim and ylim values based on the current value of tmax.
d161 12
a172 12
if(tmax < attr(x,"xlim")[2]) {
	ttt <- seq(0,tmax,length=nstep)
	foo <- function(f,tt) {
			return(range(f(tt)))
	}
	tstor <- lapply(x,foo,tt=ttt)
	attr(x,'xlim') <- c(0,tmax)
	attr(x,'ylim') <- range(unlist(tstor))
}
comment(x) <- "Prices not necessarily optimal."
tstor <- list(x=x,tstor=tstor)
putAway(tstor,type,jmax,qmax,tmax)
@


1.3
log
@Various tidying up, including simplifying the change over from
numeric vectors to spline functions.
@
text
@d2 1
a2 1
                        gprob,salval=0,verb=FALSE) {
d82 2
a85 1
tt    <- 0
d98 3
a100 2
	tt <- tt+delta
	if(verb & i%%50 == 0) cat(i,"")
d102 1
a102 19
if(verb) cat("\n")
tvec <- seq(0,tmax,length=nstep+1)
vm   <- matrix(unlist(lapply(tstor,function(z){z$v})),
                             nrow=nstep+1,ncol=qmax,byrow=TRUE)
ylim <- range(vm)
vm   <- as.data.frame(vm)
v    <- lapply(vm,function(x,t){splinefun(x=t,y=x)},t=tvec)
attr(v,'xlim') <- c(0,tmax)
attr(v,'ylim') <- ylim
class(v) <- "funlist"

vdm  <- matrix(unlist(lapply(tstor,function(z){z$vdot})),
                             nrow=nstep+1,ncol=qmax,byrow=TRUE)
ylim <- range(vdm)
vdm  <- as.data.frame(vdm)
vdot <- lapply(vdm,function(x,t){splinefun(x=t,y=x)},t=tvec)
attr(vdot,'xlim') <- c(0,tmax)
attr(vdot,'ylim') <- ylim
class(vdot) <- "funlist"
d119 2
a120 1
list(x=x,v=v,vdot=vdot)
@


1.2
log
@First go at adapting the old ``vsgen'' from the single
arrivals setting to the new multiple arrivals setting.
@
text
@d1 2
a2 4
#vsolve <- function(tmax,nstep,x,lfun,efun,salval=0,verb=FALSE,...) {
vsolve <- function(type,tmax,nstep,qmax,lambda,S,alpha,
                        gprob,salval=0,verb=FALSE,
                        n.out=max(500,round(nstep/200)),...) {
a33 5
if(attr(x,'jmax') != jmax)
	stop(paste("Pricing policy \"x\" and argument \"gprob\"",
                   "are not compatible.\n"))

# I don't think the following is necessary, but it's harmless (???).
d56 3
a58 1
} else {
d66 2
d125 3
a127 3
if(tmax > attr(x,"xlim")[2]) {
	foo <- function(f,nl) {
		ttt <- seq(0,up,length=nl)
d130 1
a130 1
	tstor <- lapply(x,foo,nl=nstep)
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
vsolve <- function(tmax,nstep,x,lfun,efun,salval=0,verb=FALSE,...) {
d15 57
a71 2
if(!all(unlist(lapply(x,is.function))))
	stop("Argument x must be a list of functions.\n")
d73 10
a82 9
qmax <- length(x)

shift <- function(u) { c(0,u)[-(1+length(u))] }

sfun  <- function(tt,v,x,lfun,efun,...) {
		xv <- unlist(lapply(x,function(f,t){f(t)},t=tt))
		vs <- shift(v)
		(xv + vs - v)*lfun(tt,...)*efun(xv,tt,...)
         }
d84 1
d88 3
a90 3
vdot <- sfun(tt,v,x,lfun,efun,...)
tmp   <- list()
tmp[[1]] <- list(v=v,vdot=vdot)
d93 4
a96 4
	m1 <- delta*sfun(tt,v,x,lfun,efun,...)
	m2 <- delta*sfun(tt+delta/2,v+m1/2,x,lfun,efun,...)
	m3 <- delta*sfun(tt+delta/2,v+m2/2,x,lfun,efun,...)
	m4 <- delta*sfun(tt+delta,v+m3,x,lfun,efun,...)
d98 2
a99 2
	vdot <- sfun(tt,v,x,lfun,efun,...)
	tmp[[i+1]] <- list(v=v,vdot=vdot)
d105 1
a105 1
vm   <- matrix(unlist(lapply(tmp,function(z){z$v})),
d114 1
a114 1
vdm  <- matrix(unlist(lapply(tmp,function(z){z$vdot})),
d122 14
a135 5
foo <- function(f,up,nl) {
	if(inherits(f,"stepfun"))
		return(range(f(c(0,knots(f),up)))) 
	ttt <- seq(0,up,length=nl)
		return(range(f(tt)))
a136 3
tmp <- lapply(x,foo,up=tmax,nl=nstep)
attr(x,'xlim') <- c(0,tmax)
attr(x,'ylim') <- range(unlist(tmp))
@
