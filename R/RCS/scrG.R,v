head	1.8;
access;
symbols;
locks
	rolf:1.8; strict;
comment	@# @;


1.8
date	2014.01.27.08.36.48;	author rolf;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.25.01.55.17;	author rolf;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.08.22.53.13;	author rolf;	state Exp;
branches;
next	1.5;

1.5
date	2009.12.21.01.56.19;	author rolf;	state Exp;
branches;
next	1.4;

1.4
date	2009.11.21.02.01.09;	author rolf;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.31.23.04.09;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.23.21.37.29;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.19.02.11.21;	author rolf;	state Exp;
branches;
next	;


desc
@Script G --- the function defining the right hand side
of the d.e. to be solved.
@


1.8
log
@Minor revision to make this function compatible with the
ode() function rather than the roll-your-own Runge-Kutte
procedure.
@
text
@scrG <- function(tt,x,parms,...) {
# Note that the objects dS, gpr, alpha, and type are
# assigned in the environment of scrG.
#
# This is the value of xdot = {script G}(x,t) (equation (6) of paper.

vvdot <- vupdate(x,tt,type)
v     <- vvdot$v
vdot  <- vvdot$vdot
qmax  <- length(v)
if(type=="sip") {
	xdot <- numeric(qmax)
	for(q in 1:qmax) {
		vq      <- v[q]
		vdotq   <- vdot[q]
		jtop    <- min(q,length(gpr))
		jv      <- 1:jtop
		rv      <- (c(v[q:1],0)[-1])[1:jtop]
		rvdot   <- (c(vdot[q:1],0)[-1])[1:jtop]
		K       <- gpr[1:jtop]
		K[jtop]    <- K[jtop] + alpha*(1-sum(K))
		if(is.list(dS)) {
			S       <- lapply(dS[jv],function(f,xx,tt){f(xx,tt)},
                                          xx=x[q],tt=tt)
			dSdx    <- sapply(S,function(f){
				          attr(f,"gradient")[,"x"]
		 	                     })
			dSdt    <- sapply(S,function(f){
				          attr(f,"gradient")[,"t"]
		 	                     })
			d2Sdx2  <- sapply(S,function(f){
				          attr(f,"hessian")[,"x","x"]
	                                     })
			d2Sdxdt <- sapply(S,function(f){
				          attr(f,"hessian")[,"x","t"]
	                                     })
			S       <- unlist(S)
		} else {
			S       <- dS(x[q], tt, jv)
			dSdx    <- attr(S, "gradient")[, "x"]
			dSdt    <- attr(S, "gradient")[, "t"]
			d2Sdx2  <- attr(S, "hessian")[, "x", "x"]
			d2Sdxdt <- attr(S, "hessian")[, "x", "t"]
		}
		num     <- -(x[q]*sum(jv*d2Sdxdt*K) + sum((rv-vq)*d2Sdxdt*K) +
	                     sum((rvdot-vdotq)*dSdx*K) + sum(jv*dSdt*K))
		den     <- x[q]*sum(jv*d2Sdx2*K) + sum((rv-vq)*d2Sdx2*K) +
	                   2*sum(jv*dSdx*K)
		xdot[q] <- num/den
	}
} else if(type=="dip") {
	N    <- length(x)
	xdot <- numeric(N)
	jmax <- length(gpr)
	for(q in 1:qmax) {
		jtop <- min(q,jmax)
		for(j in 1:jtop) {
			i       <- qj2i(q,j,qmax)
			S       <- if(is.list(dS)) {
					dS[[j]](x[i],tt)
				   }  else dS(x[i],tt,j)
			dSdx    <- attr(S,"gradient")[,"x"]
			dSdt    <- attr(S,"gradient")[,"t"]
			d2Sdx2  <- attr(S,"hessian")[,"x","x"]
			d2Sdxdt <- attr(S,"hessian")[,"x","t"]
			vdqmj   <- if(j<q) vdot[q-j] else 0
			num     <- j*(S*d2Sdxdt - dSdx*dSdt) - 
		       	           (vdqmj - vdot[q])*dSdx^2
			den     <- j*(2*dSdx^2 - S*d2Sdx2)
			xdot[i] <- num/den
		}
	}
} else stop(paste("Type",type,"unrecognized.\n"))
list(xdot=xdot,v=v,vdot=vdot)
}
@


1.7
log
@Adjusted the initial comment slightly.
@
text
@d1 1
a1 1
scrG <- function(x,tt) {
d74 1
a74 2

xdot
@


1.6
log
@Just a change in the initial comment.
@
text
@d5 2
a6 1
# This is the value of xdot = ``script G''(x,t) (equation (6) of paper).
@


1.5
log
@Got rid of ``type'' as an argument; type is now assigned
into the environment of scrG.
@
text
@d4 2
@


1.4
log
@Many glitches fixed w.r.t. to the fact that gpr may now
be of length < qmax; see log file for cev.  Fixed a genuine
error for the expression for the denominator in the dip
setting; had dSdt*dSdx where I should've had (dSdx)^2.
@
text
@d1 2
a2 2
scrG <- function(x,tt,type) {
# Note that the objects lambda.t, dS, gpr, and alpha are
d4 1
a4 1
vvdot <- vupdate(x,tt,lambda.t,type)
@


1.3
log
@Revised to cope with the two types of model (singly indexed
prices and doubly indexed prices), and to use the price
sensitivity function(s) directly (probability matrices
having been eschewed).
@
text
@d1 1
a1 1
scrG <- function(x,t,type) {
d4 1
a4 1
vvdot <- vupdate(x,t,lambda.t,type)
d7 1
d9 38
a46 24
qmax <- length(x)
xdot <- numeric(qmax)
for(q in 1:qmax) {
	if(is.list(dS)) {
		S       <- lapply(dS[1:q],function(f,x){f(x,0)},x=x[q])
		dSdx    <- sapply(S,function(f){
				attr(f,"gradient")[,"x"]
		 	  })
		dSdt    <- sapply(S,function(f){
				attr(f,"gradient")[,"t"]
		 	   })
		d2Sdx2  <- sapply(S,function(f){
				attr(f,"hessian")[,"x","x"]
	                   })
		d2Sdxdt <- sapply(S,function(f){
				attr(f,"hessian")[,"x","t"]
	                   })
		S       <- unlist(S)
	} else {
		S       <- dS(x, 0, 1:q)
		dSdx    <- attr(S, "gradient")[, "x"]
		dSdt    <- attr(S, "gradient")[, "t"]
		d2Sdx2  <- attr(S, "hessian")[, "x", "x"]
		d2Sdxdt <- attr(S, "hessian")[, "x", "t"]
a47 13
	jv      <- 1:q
	vq      <- v[q]
	vdotq   <- vdot[q]
	rv      <- c(v[q:1],0)[-1]
	rvdot   <- c(vdot[q:1],0)[-1]
	K       <- gpr[1:q]
	K[q]    <- K[q] + alpha*(1-sum(K))
	num     <- -(x[q]*sum(jv*d2Sdxdt*K) + sum((rv-vq)*d2Sdxdt*K) +
	             sum((rvdot-vdotq)*dSdx*K) + sum(jv*dSdt*K))
	den     <- x[q]*sum(jv*d2Sdx2*K) + sum((rv-vq)*d2Sd2*K) +
	           2*sum(jv*dSdx*K)
	xdot[q] <- num/den
}
a49 1
	qmax <- (-1+sqrt(1+8*N))/2
d51 1
d53 9
a61 5
		for(j in 1:q) {
			i <- qj2i(q,j,qmax)
			S <- if(is.list(dS)) dS[[j]](x[i],0) else dS(x[i],0,j)
			dSdx <- attr(S,"gradient")[,"x"]
			dSdt <- attr(S,"gradient")[,"t"]
d63 4
a66 4
			vdqmj <- if(j==q) 0 else vdot[q-j]
			num <- j*(S*d2Sdxdt - dSdx*dSdt) - 
		       	(vdqmj - vdot[q])*dSdx^2
			den <- j*(2*dSdx*dSdt - S*d2Sdx2)
@


1.2
log
@Fixed bug --- incorrect vector by matrix multiplication ---
by introducing call to ror().
@
text
@d1 64
a64 7
scrG <- local(function(x,t) {
# Note that lambda.t is assigned in the environment of scrG.
lll   <- Pfun(x,t)
vvdot <- vupdate(x,lll[["P"]],lll[["dPdx"]],lambda.t)
v     <- c(0,vvdot$v)
vdot  <- c(0,vvdot$vdot)
kv    <- 0:length(x)
d66 2
a67 8
num <- x*(lll[["d2Pdxdt"]]%*%kv) + ror(lll[["d2Pdxdt"]])%*%v +
       ror(lll[["dPdx"]])%*%vdot + lll[["dPdt"]]%*%kv

den <- x*(lll[["d2Pdx2"]]%*%kv) + ror(lll[["d2Pdx2"]])%*%v +
       2*lll[["dPdx"]]%*%kv

-num/den
})
@


1.1
log
@Initial revision
@
text
@d9 2
a10 2
num <- x*(lll[["d2Pdxdt"]]%*%kv) + lll[["d2Pdxdt"]]%*%rev(v) +
       lll[["dPdx"]]%*%rev(vdot) + lll[["dPdt"]]%*%kv
d12 2
a13 2
den <- x*(lll[["d2Pdx2"]]%*%kv) + lll[["d2Pdx2"]]%*%rev(v) +
       2*lll[["d2Pdx2"]]%*%kv
@
