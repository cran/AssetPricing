head	1.7;
access;
symbols;
locks
	rolf:1.7; strict;
comment	@# @;


1.7
date	2012.11.06.21.21.13;	author rolf;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.31.21.28.44;	author rolf;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.31.08.03.15;	author rolf;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.31.07.51.46;	author rolf;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.25.01.52.37;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.09.00.28.17;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.21.02.06.12;	author rolf;	state Exp;
branches;
next	;


desc
@Solve the differential equation which applies in the case
of discrete prices.
@


1.7
log
@Cosmetic tidying.
@
text
@xsolve.disc <- function(S,lambda,gprob,tmax,qmax,prices,nstep,type,
                        alpha,salval,maxFac,nverb) {
#
# Function xsolve.disc to solve numerically the system of d.e.'s
# for the value v_q(t) of a stock of q items at time t, using the
# method of Runge-Kutta, in the setting in which prices vary over a
# ***discrete*** set.  The optimal prices are then determined by
# maximizing over this discrete set.  (Note that time is thought
# of as ***decreasing*** toward the ``departure time'' of 0.)
# But we solve ``forward in time'', starting from 0.
#
# We are solving the vector system of differential equations
#
#	vdot(t) = {script F}(v,t)
#
# In what follows, ``script F'' is denoted by ``scrF()''.
# In addition to "v" and "t", scrF() has an additional auxilliary
# argument "op".  This is a logical scalar which defaults to FALSE;
# if "op" is TRUE then the value returned by scrF() has an attribute
# "xopt" giving the vector of values of the optimal prices (chosen
# from amongst the finite set of possible prices.
#

# Make sure the group size probabilities are OK.
    gpr <- if(is.function(gprob)) gprob(1:qmax) else gprob
    if(!is.numeric(gpr)) stop("Group size probabilities are not numeric.\n")
    if(any(gpr<0) | sum(gpr) > 1)
    	stop("Group size probabilities are not probabilities!\n")
    jmax <- max(which(gpr > sqrt(.Machine$double.eps)))
    jmax <- min(jmax,qmax)
    gpr  <- gpr[1:jmax]
    if(is.null(alpha)) {
       if(jmax > 1) stop(paste("When the maximum group size is great than 1,\n",
                               "\"alpha\" must be specified.\n"))
       alpha <- 1
    }

# If jmax = 1 we might as well set type equal to "sip" --- since
# indexing according to group size is "degenerate" in this case.
    if(jmax==1) type <- "sip"

# Make sure tmax is specified.
    if(is.null(tmax)) stop("Argument \"tmax\" was not specified.\n")

# If there is only one price sensitivity function, create a new
# function equal to the original function raised to the power "n", with
# "n" a function argument.

    if(is.list(S)) {
    	if(length(S) < jmax)
    		stop(paste("Length of \"S\" as a list must be at least ",
                               "\"jmax\" = ",jmax,".\n",sep=""))
    	if(!all(sapply(S,is.function)))
    		stop("At least one entry of \"S\" is NOT a function.\n")
    	} else if(is.function(S)) {
    	oldS <- S
    	S <- function(x,t,n) {oldS(x,t)^n}
    	environment(S) <- new.env()
    	assign("oldS",oldS,envir=environment(S))
    } else {
    	stop("Argument \"S\" must be either a function or a list of functions.\n")
    }

    environment(scrF)    <- new.env()
    environment(cev)     <- new.env()
#
    assign("dS",S,envir=environment(cev))  # "dS" to make notation compatible with
                                           # the "smooth" case.
    assign("gpr",gpr,envir=environment(cev))
    assign("alpha",alpha,envir=environment(cev))
    assign("maxFac",maxFac,envir=environment(cev))
#
    assign("x",prices,envir=environment(scrF))
    assign("lambda",lambda,envir=environment(scrF))
    assign("type",type,envir=environment(scrF))

# Do the Runge-Kutta thing.
    tvec  <- seq(0,tmax,length=nstep+1)
    tt    <- tvec[1]
    delta <- tmax/nstep
    v     <- (1:qmax)*salval
    tt    <- tvec[1]
    vdot  <- scrF(v,tt)
    x     <- scrF(v,tt,op=TRUE)
    tstor   <- list()
    tstor[[1]] <- list(x=x,v=v,vdot=vdot)

    for(i in 1:nstep) {
            assign("xback",x,envir=environment(cev))
    	m1 <- delta*scrF(v,tt)
    	m2 <- delta*scrF(v+m1/2,tt+delta/2)
    	m3 <- delta*scrF(v+m2/2,tt+delta/2)
    	m4 <- delta*scrF(v+m3,tt+delta)
    	v  <- v + (m1+2*m2+2*m3+m4)/6
    	tt <- tvec[i+1]
    	vdot <- scrF(v,tt)
    	x    <- scrF(v,tt,op=TRUE)
    	tstor[[i+1]] <- list(x=x,v=v,vdot=vdot)
    	if(nverb > 0 & i%%nverb == 0) cat(i,"")
    	if(nverb > 0 & i%%(10*nverb) == 0) cat("\n")
    }
    if(nverb >= 0 & nstep%%10 != 0) cat("\n")
    putAway(tstor,type,jmax,qmax,tmax,discrete=TRUE,prices=prices)
}
@


1.6
log
@Changed the updating of "tt" to read from a "tvec" vector
rather than incrementing by "delta".
@
text
@d1 2
a2 2
xsolve.disc <- function(type, tmax, nstep, qmax, lambda, S,
                           alpha, gprob, prices, salval=0, nverb=0) {
d20 1
a20 1
# "xopt" given the vector of values of the optimal prices (chosen
d25 19
a43 7
gpr <- if(is.function(gprob)) gprob(1:qmax) else gprob
if(!is.numeric(gpr)) stop("Group size probabilities are not numeric.\n")
if(any(gpr<0) | sum(gpr) > 1)
	stop("Group size probabilities are not probabilities!\n")
jmax <- max(which(gpr > sqrt(.Machine$double.eps)))
jmax <- min(jmax,qmax)
gpr  <- gpr[1:jmax]
d49 27
a75 26
if(is.list(S)) {
	if(length(S) != jmax)
		stop(paste("Length of \"S\" as a list must equal ",
                           "\"jmax\" = ",jmax,".\n",sep=""))
	if(!all(sapply(S,is.function)))
		stop("At least one entry of \"S\" is NOT a function.\n")
	} else if(is.function(S)) {
	oldS <- S
	S <- function(x,t,n) {oldS(x,t)^n}
	environment(S) <- new.env()
	assign("oldS",oldS,envir=environment(S))
} else {
	stop("Argument \"S\" must be either a function or a list of functions.\n")
}

environment(scrF)    <- new.env()
environment(cev)     <- new.env()
#
assign("dS",S,envir=environment(cev))  # "dS" to make notation compatible with
                                       # the "smooth" case.
assign("gpr",gpr,envir=environment(cev))
assign("alpha",alpha,envir=environment(cev))
#
assign("x",prices,envir=environment(scrF))
assign("lambda",lambda,envir=environment(scrF))
assign("type",type,envir=environment(scrF))
d78 26
a103 25
tvec  <- seq(0,tmax,length=nstep+1)
tt    <- tvec[1]
delta <- tmax/nstep
v     <- (1:qmax)*salval
tt    <- tvec[1]
vdot  <- scrF(v,tt)
x     <- scrF(v,tt,op=TRUE)
tstor   <- list()
tstor[[1]] <- list(x=x,v=v,vdot=vdot)

for(i in 1:nstep) {
	m1 <- delta*scrF(v,tt)
	m2 <- delta*scrF(v+m1/2,tt+delta/2)
	m3 <- delta*scrF(v+m2/2,tt+delta/2)
	m4 <- delta*scrF(v+m3,tt+delta)
	v  <- v + (m1+2*m2+2*m3+m4)/6
	tt <- tvec[i+1]
	vdot <- scrF(v,tt)
	x    <- scrF(v,tt,op=TRUE)
	tstor[[i+1]] <- list(x=x,v=v,vdot=vdot)
	if(nverb > 0 & i%%nverb == 0) cat(i,"")
	if(nverb > 0 & i%%(10*nverb) == 0) cat("\n")
}
if(nverb > 0) cat("\n")
putAway(tstor,type,jmax,qmax,tmax,discrete=TRUE,prices=prices)
@


1.5
log
@Moved the incrementing of "tt" to the correct position.
@
text
@d65 2
d69 1
a69 1
tt    <- 0
d81 1
a81 1
	tt <- tt+delta
@


1.4
log
@Changed the argument "verb" to "nverb" so that reports are
generated every nverb iterations at the user's discretion.
@
text
@d79 1
a82 1
	tt <- tt+delta
@


1.3
log
@Changed "verb" to "verb=FALSE" in argument list.  Added
"prices=prices" in call to putAway().
@
text
@d2 1
a2 1
                           alpha, gprob, prices, salval=0, verb=FALSE) {
d83 2
a84 2
	if(verb & i%%50 == 0) cat(i,"")
	if(verb & i%%500 == 0) cat("\n")
d86 1
a86 1
if(verb) cat("\n")
@


1.2
log
@Major changes to construct a setup in line with that used
by xsolve.cont(); changes not complete (this function not
yet operational; there's a ``Got here'' in the code.
@
text
@d2 1
a2 1
                           alpha, gprob, prices, salval, verb) {
a40 1
	}
d43 1
a43 1
	else if(is.function(S)) {
d87 1
a87 1
putAway(tstor,type,jmax,qmax,tmax,discrete=TRUE)
@


1.1
log
@Initial revision
@
text
@d1 2
a2 3
xsolve.disc <- function(type,tmax,nstep,qmax,lambda,S,alpha,
                        prices,gprob,salval=0,verb=FALSE,
                        n.out=max(500,round(nstep/200)),...) {
d12 1
a12 1
# We proceed by solving the vector system of differential equations
d14 1
a14 1
#	vdot(t) = scrF(v,t,op=TRUE)
d16 36
a51 5
# where op = ``determine the optimal price''.  The function
# ``scrF()'' means ``script F'', which denotes the system of d.e.'s
# to be solved for ``v''.  A bunch of auxilliary arguments are needed
# to specify ``script F''; these are assigned in the environment
# of scrF().
d53 13
d67 5
a71 6
tstor <- list()
tvec  <- seq(0,tmax,length=nstep+1)
tt    <- tvec[1]
v     <- (0:qmax)*salval
vdot  <- scrF(tt,v,prices,lfun,efun)
x     <- scrF(tt,v,prices,lfun,efun,op=TRUE)
a72 1
# Got here.
d75 7
a81 8
	m1 <- delta*scrF(tt,v,prices,lfun,efun)
	m2 <- delta*scrF(tt+delta/2,v+m1/2,prices,lfun,efun)
	m3 <- delta*scrF(tt+delta/2,v+m2/2,prices,lfun,efun)
	m4 <- delta*scrF(tt+delta,v+m3,prices,lfun,efun)
	v    <- v + (m1+2*m2+2*m3+m4)/6
	vdot <- scrF(tt,v,prices,lfun,efun)
	x    <- scrF(tt,v,prices,lfun,efun,op=TRUE)
	tt   <- tvec[i+1]
d83 1
d85 1
d88 1
a88 35
xx   <- matrix(unlist(lapply(tstor,function(z){z$x})),
                             nrow=nstep+1,ncol=qmax,byrow=TRUE)
ylim <- range(xx)
xx   <- as.data.frame(xx)
x    <- lapply(xx,function(x,t){approxfun(x=t,y=x,method="constant",
                                yleft=NA,yright=NA)},t=tvec)
x    <- lapply(x,a2sf,tt=tvec)
attr(x,'xlim') <- c(0,tmax)
attr(x,'ylim') <- ylim
attr(x,'prices') <- prices
class(x) <- c("funlist","pwcfunlist") # pwc <--> piecewise constant.
comment(x) <- "Optimal prices."

foo  <- function(x,y,n) {
	temp <- spline(x,y,n)
	splinefun(temp$x,temp$y)
}

vv   <- matrix(unlist(lapply(tstor,function(z){z$v[-1]})),
                             nrow=nstep+1,ncol=qmax,byrow=TRUE)
ylim <- range(vv)
vv   <- as.data.frame(vv)
v    <- lapply(vv,function(x,t,n){foo(x=t,y=x,n=n)},t=tvec,n=n.out)
attr(v,'xlim') <- c(0,tmax)
attr(v,'ylim') <- ylim
class(v) <- "funlist"
vd   <- matrix(unlist(lapply(tstor,function(z){z$vdot[-1]})),
                             nrow=nstep+1,ncol=qmax,byrow=TRUE)
ylim <- range(vd)
vd   <- as.data.frame(vd)
vdot <- lapply(vd,function(x,t,n){foo(x=t,y=x,n=n)},t=tvec,n=n.out)
attr(vdot,'xlim') <- c(0,tmax)
attr(vdot,'ylim') <- ylim
class(vdot) <- "funlist"
list(x=x,v=v,vdot=vdot)
@
