head	1.6;
access;
symbols;
locks
	rolf:1.6; strict;
comment	@# @;


1.6
date	2009.12.21.01.58.07;	author rolf;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.21.02.04.12;	author rolf;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.31.23.53.01;	author rolf;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.31.23.05.11;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.23.21.38.42;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.19.02.11.59;	author rolf;	state Exp;
branches;
next	;


desc
@Update the values of the vector of expected values of
stocks at a new time t and the updated values of the
prices.
@


1.6
log
@Got rid of lambda.t as an argument; no calculates lambda(t)
itself; the old value was slightly wrong in 3 out of 4
instances!  Also changed the name of argument `t' to `tt''.
@
text
@vupdate <- function(x,tt,type) {
# Note that objects lambda, dS, gpr and alpha are assigned in the
# environment of vupdate.
N <- length(x)
if(type=="sip") {
	qmax <- N
	v    <- numeric(qmax+1)
	for(q in 1:qmax) {
		jtop <- min(q,length(gpr))
		rv   <- (v[q:1])[1:jtop]
		K    <- gpr[1:jtop]
		K[jtop] <- K[jtop] + alpha*(1-sum(K))
		if(is.list(dS)) {
			S      <- lapply(dS[1:jtop],function(f,x,t){
					f(x,t)},x=x[q],t=tt)
			dSdx   <- sapply(S,function(f){
				  attr(f,"gradient")[,"x"]
			  	  })
			S      <- unlist(S)
		} else {
			S      <- dS(x[q], tt, 1:jtop)
			dSdx   <- attr(S, "gradient")[, "x"]
		}
		num <- (x[q]*sum((1:jtop)*dSdx*K) + sum(rv*dSdx*K) +
                         sum((1:jtop)*S*K))
		den <- sum(dSdx*K)
		v[q+1] <- num/den
	}
	v <- v[-1]
} else if(type=="dip") {
	jmax <- length(gpr)
	qmax <- N/jmax + (jmax-1)/2
	x1 <- x[1:qmax]
	S    <- if(is.list(dS)) dS[1](x1,tt) else dS(x1,tt,1)
	dSdx <- attr(S,"gradient")[,"x"]
	v <- cumsum(x1+S/dSdx)
} else stop(paste("Type",type,"unrecognized.\n"))

vdot <- lambda(tt)*(-v + cev(x,tt,v,type))

list(v=v,vdot=vdot)
}
@


1.5
log
@Many glitches fixed w.r.t. the fact that gpr may now
be of length < qmax; see log file for cev.
@
text
@d1 2
a2 2
vupdate <- function(x,t,lambda.t,type) {
# Note that objects dS, gpr and alpha are assigned in the
d15 1
a15 1
					f(x,t)},x=x[q],t=t)
d21 1
a21 1
			S      <- dS(x[q], t, 1:jtop)
d34 1
a34 1
	S    <- if(is.list(dS)) dS[1](x1,t) else dS(x1,t,1)
d39 1
a39 1
vdot <- lambda.t*(-v + cev(x,t,v,type))
@


1.4
log
@Adjusted the comment about objects stored in the environment.
@
text
@d9 4
a12 3
		rv   <- rev(v[1:q])
		K    <- gpr[1:q]
		K[q] <- K[q] + alpha*(1-sum(K))
d14 1
a14 1
			S      <- lapply(dS[1:q],function(f,x,t){
d21 1
a21 1
			S      <- dS(x[q], t, 1:q)
d24 2
a25 2
		num <- -(x[q]*sum((1:q)*dSdx*K) + sum(rv*dSdx*K) +
                         sum((1:q)*S*K))
d31 4
a34 3
	qmax <- (-1+sqrt(1+8*N))/2
	x <- x[1:qmax]
	S    <- if(is.list(dS)) dS[1](x,t) else dS(x,t,1)
d36 1
a36 1
	v <- cumsum(x+S/dSdx)
@


1.3
log
@ Revised to cope with the two types of model (singly indexed
prices and doubly indexed prices), and to use the price
sensitivity function(s) directly (probability matrices
having been eschewed).
@
text
@d2 2
d9 3
a11 1
		rv  <- rev(v[1:q])
d29 1
a29 1
} else if(type="dip") {
@


1.2
log
@Corrected v[2:(q+1)] to v[1:q] in second line
of for-loop.
@
text
@d1 35
a35 7
vupdate <- local(function(x,P,dPdx,lambda.t) {
qmax <- length(x)
v <- numeric(qmax+1)
for(q in 1:qmax) {
	v[q+1] = -(x[q]*sum((1:q)*dPdx[q,2:(q+1)]) +
                      sum(rev(v[1:q])*dPdx[q,2:(q+1)]) +
                            sum((1:q)*P[q,2:(q+1)]))/dPdx[q,1]
a36 4
v <- v[-1]
vdot <- lambda.t*(-v + cev(x,v,P))
list(v=v,vdot=vdot)
})
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
                      sum(rev(v[2:(q+1)])*dPdx[q,2:(q+1)]) +
@
