head	1.10;
access;
symbols;
locks
	rolf:1.10; strict;
comment	@# @;


1.10
date	2014.01.27.08.23.36;	author rolf;	state Exp;
branches;
next	1.9;

1.9
date	2012.11.06.21.26.01;	author rolf;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.31.07.18.15;	author rolf;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.25.01.51.06;	author rolf;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.09.00.14.29;	author rolf;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.21.01.57.03;	author rolf;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.31.23.52.17;	author rolf;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.31.22.57.23;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.23.21.34.24;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.19.02.09.10;	author rolf;	state Exp;
branches;
next	;


desc
@Conditional expected value of a stock, given an
arrival at time t.
@


1.10
log
@Major change to the way smoothing is handled for xsolve.disc()
and xsolve.pwl().  See Changelog and doc'n.
@
text
@cev <- function(x,t,v,type,maximize=FALSE) {
#
# Conditional expected value (given an arrival at
# the time in question).  Note that objects dS, gpr, alpha
# and epsilon are assigned in the environment of cev.
#
if(!(type%in%c("sip","dip")))
    stop(paste("Type",type,"not recognized.\n"))
qmax <- length(v)
jmax <- length(gpr)
R    <- numeric(qmax)

if(maximize) {
# Since we are maximizing we are using either xsolve.disc() or
# xsolve.pwl().  If we are using xsolve.disc() then x is a vector
# whose entries are the possible discrete prices.  If we are using
# xsolve.pwl() then x is a list, created by getPossPrices(), with
# one entry for each value of q.
        E      <- parent.env(environment())
        xback  <- E$xback
        usexb  <- !is.null(xback)
        lopt   <- if(type=="sip") qmax else jmax*(qmax+0.5-jmax/2)
        xopt   <- numeric(lopt)
        for(q in 1:qmax) {
            vq   <- v[q]
            jtop <- min(q,jmax)
            rv   <- (c(v[q:1],0)[-1])[1:jtop]
            K    <- gpr[1:jtop]
            if(jtop < jmax) K[jtop] <- K[jtop] + alpha*(1-sum(K))
            xc <- if(is.list(x)) x[[q]] else x
            if(type=="sip") {
                if(usexb) {
                    xb <- xback[q]
                    xc <- sort(unique(c(xc,xb)))
                }
                nx  <- length(xc)
                tmp <- numeric(nx)
                S   <- getS(dS,xc,t,1:jtop)
                for(i in 1:nx) {
                    tmp[i] <- xc[i]*sum((1:jtop)*S[i,1:jtop]*K) +
                                    sum((rv - vq)*S[i,1:jtop]*K)
                }
# New stuff.  If there is "no discernable improvement" by changing
# to a new price, i.e. if the maximum of tmp is no more than its
# value at "the previous price" minus epsilon, then set the new
# price equal to the previous value.  If there is "discernable
# improvement" then look at those values of price where the value
# of tmp is greater than its maximum value minus epsilon and pick
# the one which is closest to the previous price.  This prevents
# there being too many jumps, and where there are jumps, prevents
# them from being unnecessarily large.  Before, we just took the
# first of the possible maxima of tmp.  If a number of values of
# tmp differ only by "numerical noise" then the first maximum can
# occur at a price substantially different from the previous price
# when there is no meaningful improvement from the change.
                if(usexb) {
                    mt <- max(tmp)
                    ib <- which(xc==xb)
                    if(mt - tmp[ib] <= epsilon) im <- ib else {
                        ic <- which(tmp > mt - epsilon)
                        im <- ic[which.min(abs(xc[ic]-xb))]
                    }
                } else im <- which.max(tmp)[1]
# End new stuff.
                R[q]    <- tmp[im] + vq
                xopt[q] <- xc[im]
                } else { # type == "dip"
# Here xc may be a vector of candidate prices --- discrete pricing ---
# or a list whose j-th entry is the vector of candidate prices for
# groups of size j.
                    iqj <- qj2i(q,1:jtop,qmax)
                    if(usexb) xb  <- xback[iqj]
                    Rtmp <- numeric(jtop)
                    xtmp <- numeric(jtop)
                    for(j in 1:jtop) {
                        xcj <- if(is.list(xc)) xc[[j]] else xc
                        if(usexb) xcj <- sort(unique(c(xcj,xb[j])))
                        nxj <- length(xcj)
                        S   <- getS(dS,xcj,t,j)
                        for(i in 1:nxj) {
                            tmp[i] <- (j*xcj[i] + rv[j] - vq)*S[i,1]*K[j]
                        }
# New stuff for the "dip" case.
                        if(usexb) {
                            mt <- max(tmp)
                            ib <- which(xcj==xb[j])
                            if(mt - tmp[ib] <= epsilon) im <- ib else {
                                ic <- which(tmp > mt - epsilon)
                                im <- ic[which.min(abs(xcj[ic]-xb))]
                            }
                        } else im  <- which.max(tmp)[1]
# End new stuff.
                        Rtmp[j] <- tmp[im]
                        xtmp[j] <- xc[im]
                    }
                R[q] <- sum(Rtmp) + vq
                iv   <- qj2i(q,1:jtop,qmax)
                xopt[iv] <- xtmp
            }
        }
    attr(R,"xopt") <- xopt
} else {
    S <- getS(dS,x,t,1:jmax)
    for(q in 1:qmax) {
        vq   <- v[q]
        jtop <- min(q,jmax)
        rv   <- (c(v[q:1],0)[-1])[1:jtop]
        K    <- gpr[1:jtop]
        if(jtop < jmax) K[jtop] <- K[jtop] + alpha*(1-sum(K))
        if(type=="sip") {
            R[q] <- x[q]*sum((1:jtop)*S[q,1:jtop]*K) +
                                 sum((rv - vq)*S[q,1:jtop]*K) + vq
        } else {
            i    <- qj2i(q,1:jtop,qmax)
            R[q] <- sum(((1:jtop)*x[i] + rv - vq)*
                                        S[cbind(i,1:jtop)]*K) + vq
        }
    }
}
R
}
@


1.9
log
@Adjusted to make use of "maxFac" and "xback" objects in
choosing an appropriate maximum.
@
text
@d5 1
a5 1
# and maxFac are assigned in the environment of cev.
d8 1
a8 1
	stop(paste("Type",type,"not recognized.\n"))
a11 7
xall <- if(is.numeric(x)) x else unlist(x) 
if(is.list(dS)) {
	S <- lapply(dS,function(f,x,t){f(x,t)},x=xall,t=t)
} else {
	S <- lapply(1:jmax,function(j,dS,x,t){dS(x,t,j)},dS=dS,x=xall,t=t)
}
S <- matrix(unlist(S),nrow=length(xall),ncol=jmax)
d14 5
d22 62
a83 22
	lopt   <- if(type=="sip") qmax else jmax*(qmax+0.5-jmax/2)
	xopt   <- numeric(lopt)
	istart <- 0
	for(q in 1:qmax) {
		vq   <- v[q]
		jtop <- min(q,jmax)
		rv   <- (c(v[q:1],0)[-1])[1:jtop]
		K    <- gpr[1:jtop]
		if(jtop < jmax) K[jtop] <- K[jtop] + alpha*(1-sum(K))
		xc <- if(is.list(x)) x[[q]] else x
		nx  <- length(xc)
		ind <- istart + (1:nx)
		tmp <- numeric(nx)
		if(type=="sip") {
			for(i in 1:nx) {
				ii <- ind[i]
				tmp[i] <- xc[i]*sum((1:jtop)*S[ii,1:jtop]*K) +
                        		     sum((rv - vq)*S[ii,1:jtop]*K)
			}
# New stuff.  If there are multiple maxima, take the one closest
# to the previous value.  (To prevent wild oscillation of traces.)
# Before, we just took the first of the possibilities.
d85 7
a91 29
                            eCrit <- diff(range(tmp))/maxFac
			    imax  <- rwmax(tmp,eCrit)
                        } else imax <- which.max(tmp)[1]
                        if(length(imax) > 1) {
                               xb   <- xback[q]
                               id   <- which.min(abs(xb-xc[imax]))[1]
                               imax <- imax[id]
                        }
# End new stuff.
			R[q]    <- tmp[imax] + vq
			xopt[q] <- xc[imax]
		} else { # type == "dip"
			Rtmp <- numeric(jtop)
			xtmp <- numeric(jtop)
			for(j in 1:jtop) {
				for(i in 1:nx) {
					ii <- ind[i]
					tmp[i] <- (j*xc[i] + rv[j] - vq)*S[ii,j]*K[j]
				}
# New stuff.  If there are multiple maxima, take the one closest
# to the previous value.  (To prevent wild oscillation of traces.)
# Before, we just took the first of the possibilities.
			        imax <- rwmax(tmp)
                                if(length(imax) > 1 & usexb) {
                                       iqj  <- qj2i(q,j,qmax)
                                       xb   <- xback[iqj]
                                       id   <- which.min(abs(xb-xc[imax]))[1]
                                       imax <- imax[id]
                                } else imax <- imax[1]
d93 9
a101 10
				Rtmp[j] <- tmp[imax]
				xtmp[j] <- xc[imax]
			}
			R[q] <- sum(Rtmp) + vq
			iv   <- qj2i(q,1:jtop,qmax)
			xopt[iv] <- xtmp
		}
	istart <- if(is.list(x)) istart + nx else 0
	}
	attr(R,"xopt") <- xopt
d103 16
a118 15
	for(q in 1:qmax) {
		vq   <- v[q]
		jtop <- min(q,jmax)
		rv   <- (c(v[q:1],0)[-1])[1:jtop]
		K    <- gpr[1:jtop]
		if(jtop < jmax) K[jtop] <- K[jtop] + alpha*(1-sum(K))
		if(type=="sip") {
			R[q] <- x[q]*sum((1:jtop)*S[q,1:jtop]*K) +
                        	     sum((rv - vq)*S[q,1:jtop]*K) + vq
		} else {
			i    <- qj2i(q,1:jtop,qmax)
			R[q] <- sum(((1:jtop)*x[i] + rv - vq)*
                        	            S[cbind(i,1:jtop)]*K) + vq
		}
	}
@


1.8
log
@Adjusted code to allow for the fact that "x" (the vector
of candidate possible values for price, *differs* with
different values of "q" in the piecewise linear setting
(unlike the discrete price setting).  Introduced "xall"
(the unlisting of x) and xc ("current" value of x), and
"istart" (the starting index of the rows of the S matrix
for the q-th interation).  Rearranged the code into "maximize"
and "non-maximize" blocks rather than mixing the two.
@
text
@d4 2
a5 2
# the time in question).  Note that objects dS, gpr and alpha
# are assigned in the environment of cev.
d21 5
a25 2
	lopt <- if(type=="sip") qmax else jmax*(qmax+0.5-jmax/2)
	xopt <- numeric(lopt)
a26 1
	eps <- sqrt(.Machine$double.eps)
d43 13
a55 1
			imax    <- which.max(tmp)[1]
d66 12
a77 2
				imax    <- which.max(tmp)[1]
				Rtmp[j]   <- tmp[imax]
d98 1
@


1.7
log
@Corrected ``type==dip'' to ``type=="dip"''.
@
text
@d2 1
d6 1
d11 2
d14 1
a14 1
	S <- lapply(dS,function(f,x,t){f(x,t)},x=x,t=t)
d16 1
a16 1
	S <- lapply(1:jmax,function(j,dS,x,t){dS(x,t,j)},dS=dS,x=x,t=t)
d18 2
a19 2
S <- matrix(unlist(S),nrow=length(x),ncol=jmax)
R <- numeric(qmax)
d21 19
a39 18
	tmp  <- numeric(nrow(S))
	xopt <- if(type=="sip") numeric(qmax) else numeric(jmax*(qmax+0.5-jmax/2))
	if(type=="dip") {
		Rtmp <- numeric(nrow(S))
		xtmp <- numeric(nrow(S))
	}
}
for(q in 1:qmax) {
	vq   <- v[q]
	jtop <- min(q,jmax)
	rv   <- (c(v[q:1],0)[-1])[1:jtop]
	K    <- gpr[1:jtop]
	if(jtop < jmax) K[jtop] <- K[jtop] + alpha*(1-sum(K))
	if(type=="sip") {
		if(maximize) {
			for(i in 1:nrow(S)) {
				tmp[i] <- x[i]*sum((1:jtop)*S[i,1:jtop]*K) +
                        		     sum((rv - vq)*S[i,1:jtop]*K)
d43 4
a46 7
			xopt[q] <- x[imax]
		} else {
			R[q] <- x[q]*sum((1:jtop)*S[q,1:jtop]*K) +
                        	     sum((rv - vq)*S[q,1:jtop]*K) + vq
		}
	} else if(type=="dip") {
		if(maximize) {
d48 3
a50 2
				for(ii in 1:nrow(S)) {
					tmp[ii] <- (j*x[ii] + rv[j] - vq)*S[ii,j]*K[j]
d52 3
a54 3
				imax <- which.max(tmp)
				Rtmp[j] <- tmp[imax]
				xtmp[j] <- x[imax]
d57 16
a72 2
			i    <- qj2i(q,1:jtop,qmax)
			xopt[i] <- xtmp
d74 2
a75 2
		R[q] <- sum(((1:jtop)*x[i] + rv - vq)*
                        S[cbind(i,1:jtop)]*K) + vq
a78 1
if(maximize) attr(R,"xopt") <- xopt
@


1.6
log
@Revised to allow for maximization over a discrete set of prices.
@
text
@d19 1
a19 1
	if(type==dip) {
@


1.5
log
@Fixed various glitches related to the fact that the gpr
vector is now truncated at the point where it becomes
(effectively) zero, rather than having trailing zeroes
out to the qmax entry.  There were glitches with rv and
K, and indices 1:q had to be replaced with 1:jtop where
jtop = min{q,length(gpr)}.
@
text
@d1 1
a1 1
cev <- function(x,t,v,type) {
d16 8
d31 12
a42 2
		R[q] <- x[q]*sum((1:jtop)*S[q,1:jtop]*K) +
                        sum((rv - vq)*S[q,1:jtop]*K) + vq
d44 13
a56 1
		i    <- qj2i(q,1:jtop,qmax)
d59 1
d62 1
@


1.4
log
@Adjusted the comment about objects stored in the environment.
@
text
@d8 1
d12 1
a12 1
	S <- lapply(1:qmax,function(j,dS,x,t){dS(x,t,j)},dS=dS,x=x,t=t)
d14 1
a14 1
S <- matrix(unlist(S),nrow=length(x),ncol=qmax)
d17 5
a21 4
	rv <- c(v[q:1],0)[-1]
	vq <- v[q]
	K  <- gpr[1:q]
	K[q] <- K[q] + alpha*(1-sum(K))
d23 2
a24 2
		R[q] <- x[q]*sum((1:q)*S[q,1:q]*K) +
                        sum((rv - vq)*S[q,1:q]*K) + vq
d26 3
a28 2
		i    <- qj2i(q,1:q,qmax)
		R[q] <- sum(((1:q)*x[i] + rv -vq)*S[cbind(i,1:q)]*K) + vq
@


1.3
log
@Revised to cope with the two types of model (singly indexed
prices and doubly indexed prices), and to use the price
sensitivity function(s) directly (probability matrices
having been eschewed).
@
text
@d3 2
a4 1
# the time in question.
@


1.2
log
@Fixed bug by putting in call to ror() to do matrix
multiplication correctly.
@
text
@d1 1
a1 1
cev <- local(function(x,v,P) {
d4 25
a28 3
qmax <- length(x)
x*P%*%(0:qmax) + ror(P)%*%c(0,v)
})
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
x*P%*%(0:qmax) + P%*%rev(c(0,v))
@
