head	1.3;
access;
symbols;
locks
	rolf:1.3; strict;
comment	@# @;


1.3
date	2009.09.19.23.54.44;	author rolf;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.19.22.10.51;	author rolf;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.19.02.10.22;	author rolf;	state Exp;
branches;
next	;


desc
@Create probability and derivatives matrices from expression
for the time varying elasticity of demand function and the
group size probabilities.
@


1.3
log
@Reorganized the multiplication of the probability and
derivative matrices by the group size probabilities.
@
text
@Pfun <- local(function(x,t) {
#
# Get E^n and its derivatives, n = 1 to qmax and attach
# to these as an attribute the probability that an arriving
# group is of size n.
qmax <- length(x)
yyy  <- list()
# Function xxx() has been assigned in the enviroment of Pfun.
for(n in 1:qmax) {
	yn <- xxx(x,t,n)
	attr(yn,"prob") <- gpr[n]
	yyy[[n]] <- yn
}

# Build P, dPdx, dPdt, d2Pdxdt, and d2Pdx2.
zzz <- lapply(yyy,function(x){
		prob <- attr(x,"prob")
		list(P=x*prob,
		dPdx=attr(x,"gradient")[,"x"]*prob,
		dPdt=attr(x,"gradient")[,"t"]*prob,
		d2Pdxdt=attr(x,"hessian")[,"x","t"]*prob,
		d2Pdx2=attr(x,"hessian")[,"x","x"]*prob)
                  }
            )
list(P=pander(zzz,qmax,"P"),
     dPdx=pander(zzz,qmax,"dPdx"),
     dPdt=pander(zzz,qmax,"dPdt"),
     d2Pdxdt=pander(zzz,qmax,"d2Pdxdt"),
     d2Pdx2=pander(zzz,qmax,"d2Pdx2")
     )
})
@


1.2
log
@Revised to use the new three argument form for the ``xxx''
function, to permit the use of a vector ``n'' when ``x''
is scalar.
@
text
@d3 3
a5 1
# Get pi.n * E^n and its derivatives, n = 1 to qmax.
d10 3
a12 1
	yyy[[n]] <- xxx(x,t,n)
d17 6
a22 5
		list(P=x,
		dPdx=attr(x,"gradient")[,"x"],
		dPdt=attr(x,"gradient")[,"t"],
		d2Pdxdt=attr(x,"hessian")[,"x","t"],
		d2Pdx2=attr(x,"hessian")[,"x","x"])
@


1.1
log
@Initial revision
@
text
@d8 1
a8 3
	assign("n",n,envir=environment(xxx))
	assign("pi.n",gpr[n],envir=environment(xxx))
	yyy[[n]] <- xxx(x,t)
@
